AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Cloudformation template for BailemosHelsinki bot and API stack
Parameters:
    S3BucketName:
        Type: String
        Description: S3 bucket name (used to store lambda code and event data)
    FacebookPageId:
        Type: Number
        Description: Facebook page ID
    FacebookAppSecret:
        Type: String
        Description: Facebook app secret
    FacebookPageAccessToken:
        Type: String
        Description: Facebook page access token
    FacebookVerificationToken:
        Type: String
        Description: Payload sent by Facebook when authenticating a challenge-response from Facebook
    LambdaDebugMode:
        Type: String
        Description: Turn on debug mode for lambdas
        AllowedValues:
            -   ALL
            -   AUTHENTICATOR
            -   MESSAGE_PROCESSING
            -   EVENT_DATA_UPDATE
            -   API_QUERY

Resources:
    LambdaBotFacebookAuthenticator:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                S3Bucket: 
                    Ref: S3BucketName
                S3Key: lambdas/bot/handleChallengeResponse/lambda_package.zip
            Description: Handles the challenge-response authentication from Facebook
            Environment:
                Variables:
                    FACEBOOK_VERIFICATION_TOKEN:
                        Ref: FacebookVerificationToken
                    DEBUG_MODE:
                        Ref: LambdaDebugMode
            FunctionName: bailemoshelsinki-handleChallengeResponse
            Handler: index.handler
            Role: 
                Fn::Sub: 'arn:aws:iam::${AWS::Region}:role/bailemoshelsinki-bot'
            Runtime: nodejs8.10
            Timeout: 10
    LambdaBotMessageHandler:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                S3Bucket: 
                    Ref: S3BucketName
                S3Key: lambdas/bot/processMessages/lambda_package.zip
            Description: Processes incoming chat messages from Facebook Messenger
            Environment:
                Variables:
                    DATA_STAGING_BUCKET_NAME:
                        Ref: S3BucketName
                    EVENT_DATA_FILENAME: data/events.json
                    FACEBOOK_APP_SECRET: 
                        Ref: FacebookAppSecret
                    FACEBOOK_PAGE_ACCESS_TOKEN: 
                        Ref: FacebookPageAccessToken
                    FACEBOOK_PAGE_ID: 
                        Ref: FacebookPageId
                    DEBUG_MODE:
                        Ref: LambdaDebugMode
            FunctionName: bailemoshelsinki-processMessages
            Handler: index.handler
            Role: 
                Fn::Sub: 'arn:aws:iam::${AWS::Region}:role/bailemoshelsinki-bot'
            Runtime: nodejs8.10
            Timeout: 30
    LambdaEventDataUpdater:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                S3Bucket:
                    Ref: S3BucketName
                S3Key: lambdas/api/eventDataAutoUpdater/lambda_package.zip
            Description: Updates stored event data, triggered from a Cloudwatch scheduled event.
            Environment:
                Variables:
                    DEBUG_MODE:
                        Ref: LambdaDebugMode
            FunctionName: bailemoshelsinki-eventDataAutoUpdater
            Handler: index.handler
            Runtime: nodejs8.10
            Timeout: 180
    LambdaApiQueryHandler:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                S3Bucket:
                    Ref: S3BucketName
                S3Key: lambdas/api/apiQueryHandler/lambda_package.zip
            Description: Handles queries coming from the public API
            Environment:
                Variables:
                    DEBUG_MODE:
                        Ref: LambdaDebugMode
            FunctionName: bailemoshelsinki-apiQueryHandler
            Handler: index.handler
            Runtime: nodejs8.10
            Timeout: 180

    PublicRestApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name: bailemoshelsinki-public-api

    ApiResourceHealth:
        Type: 'AWS::ApiGateway::Resource'
        Properties:
            ParentId: 
                Fn::GetAtt:
                    -   PublicRestApi
                    -   RootResourceId
            PathPart: health
            RestApiId: 
                Ref: PublicRestApi
    ApiMethodHealthOptions:
        Type: AWS::ApiGateway::Method
        Properties:
            ResourceId: 
                Ref: ApiResourceHealth
            RestApiId: 
                Ref: PublicRestApi
            AuthorizationType: NONE
            HttpMethod: OPTIONS
            RequestParameters: {}
            Integration:
                Type: MOCK
                RequestTemplates:
                    application/json: '{statusCode:200}'
                IntegrationResponses:
                    -   StatusCode: '200'
                        ResponseParameters:
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                            method.response.header.Access-Control-Allow-Headers: >-
                                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
                            method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
                        ResponseTemplates:
                            application/json: ''
            MethodResponses:
                -   StatusCode: '200'
                    ResponseParameters:
                        method.response.header.Access-Control-Allow-Origin: true
                        method.response.header.Access-Control-Allow-Headers: true
                        method.response.header.Access-Control-Allow-Methods: true
                    ResponseModels: {}
    ApiMethodHealthGet:
        Type: AWS::ApiGateway::Method
        Properties:
            ResourceId: 
                Ref: ApiResourceHealth
            RestApiId: 
                Ref: PublicRestApi
            HttpMethod: GET
            AuthorizationType: NONE
            ApiKeyRequired: true
            RequestParameters: {}
            Integration:
                Type: MOCK
                RequestTemplates:
                    application/json: '{statusCode:200}'
                IntegrationResponses:
                    -   StatusCode: '200'
                        ResponseTemplates:
                            application/json: ''
            MethodResponses:
                -   StatusCode: '200'
                    ResponseModels: {}

    ApiResourceBot:
        Type: AWS::ApiGateway::Resource
        Properties:
            ParentId: 
                Fn::GetAtt:
                    - PublicRestApi
                    - RootResourceId
            PathPart: bot
            RestApiId: 
                Ref: PublicRestApi
    ApiMethodBotGet:
        Type: AWS::ApiGateway::Method
        Properties:
            ResourceId:
                Ref: ApiResourceBot
            RestApiId:
                Ref: PublicRestApi
            HttpMethod: GET
            AuthorizationType: NONE
            RequestParameters: {}
            Integration:
                IntegrationHttpMethod: GET
                Type: AWS_PROXY
                Uri:
                    Fn::Sub:
                        -   "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                        -   region: 
                                Ref: AWS::Region
                            lambdaArn: 
                                Fn::GetAtt:
                                    -   LambdaBotFacebookAuthenticator
                                    -   Arn
            MethodResponses: []
    ApiMethodBotPost:
        Type: AWS::ApiGateway::Method
        Properties:
            ResourceId:
                Ref: ApiResourceBot
            RestApiId:
                Ref: PublicRestApi
            HttpMethod: POST
            AuthorizationType: NONE
            RequestParameters: {}
            Integration:
                IntegrationHttpMethod: POST
                Type: AWS_PROXY
                Uri:
                    Fn::Sub:
                        -   "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                        -   region: 
                                Ref: AWS::Region
                            lambdaArn: 
                                Fn::GetAtt: 
                                    -   LambdaBotMessageHandler
                                    -   Arn
            MethodResponses: []
    ApiResourceEvents:
        Type: AWS::ApiGateway::Method
        Properties:
            ParentId: 
                Fn::GetAtt:
                    - PublicRestApi
                    - RootResourceId
            PathPart: bot
            RestApiId: 
                Ref: PublicRestApi
    ApiResourceEventsGet:
        Type: AWS::ApiGateway::Method
        Properties:
            ResourceId:
                Ref: ApiResourceBot
            RestApiId:
                Ref: PublicRestApi
            HttpMethod: POST
            AuthorizationType: NONE
            ApiKeyRequired: true
            RequestParameters: {}
            Integration:
                IntegrationHttpMethod: POST
                Type: AWS_PROXY
                Uri:
                    Fn::Sub:
                        -   "arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
                        -   region: 
                                Ref: AWS::Region
                            lambdaArn: 
                                Fn::GetAtt: 
                                    -   LambdaApiQueryHandler
                                    -   Arn
            MethodResponses: []
    
    DevApiDeployment:
        Type: AWS::ApiGateway::Deployment
        DependsOn:
            -   PublicRestApi
            -   ApiResourceHealth
            -   ApiResourceBot
            -   ApiResourceEvents
            -   ApiMethodHealthOptions
            -   ApiMethodHealthGet
            -   ApiMethodBotGet
            -   ApiMethodBotPost
            -   ApiResourceEventsGet
        Properties:
            RestApiId:
                Ref: PublicRestApi
            StageName: dev
    ApiDevUsagePlan:
        Type: AWS::ApiGateway::UsagePlan
        DependsOn:
            -   PublicRestApi
            -   DevApiDeployment
        Properties:
            ApiStages:
            -   ApiId:
                    Ref: PublicRestApi
                Stage: dev
            Description: Usage plan for spro-bsatlas-tow-events-api (INT3)
            UsagePlanName: bailemoshelsinki-api-dev-plan
    DevApiKey:
        Type: AWS::ApiGateway::ApiKey
        DependsOn:
            -   ApiDevUsagePlan
        Properties:
            Description: API key for the BailemosHelsinki public API (dev)
            Enabled: true
            GenerateDistinctId: true
            Name: bailemoshelsinki-dev-apikey
            StageKeys:
                -   RestApiId: 
                        Ref: PublicRestApi
                    StageName: int3
    DevPlanKey:
        Type: AWS::ApiGateway::UsagePlanKey
        DependsOn:
            -   ApiDevUsagePlan
            -   DevApiKey
        Properties:
            KeyId:
                Ref: DevApiKey
            KeyType: API_KEY
            UsagePlanId:
                Ref: ApiDevUsagePlan
    
    CloudwatchScheduledEventDataUpdate:
        Type: AWS::Events::Rule
        DependsOn:
            -   LambdaEventDataUpdater
        Properties:
            Description: Scheduled run to automatically update the event data used by the Bailemos Helsinki API
            Name: bailemoshelsinki-eventdata-auto-updater
            ScheduleExpression: cron(0 4,15 * * ? *)
            State: ENABLED
            Targets:
                    -   Arn: 
                            Fn::GetAtt: 
                                -   LambdaEventDataUpdater
                                -   Arn
                        Id: eventDataUpdaterLambda
